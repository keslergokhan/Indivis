// <auto-generated />
using System;
using Indivis.Infrastructure.Persistence.Data.IndivisContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Indivis.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(IndivisContext))]
    [Migration("20240428195630_UpdateWidgetSetting")]
    partial class UpdateWidgetSetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Indivis.Core.Domain.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Announcement", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<bool>("IsUrlData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.EntityUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<Guid>("UrlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UrlId");

                    b.ToTable("EntityUrl", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(5);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("FLag")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<byte>("Sort")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(8);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.ManyToMany.Url_UrlSystemType", b =>
                {
                    b.Property<Guid>("UrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UrlSystemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UrlId", "UrlSystemTypeId");

                    b.HasIndex("UrlSystemTypeId");

                    b.ToTable("Url_UrlSystemType", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("PageSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<Guid>("UrlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PageSystemId");

                    b.HasIndex("UrlId")
                        .IsUnique();

                    b.ToTable("Page", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.PageSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.ToTable("PageSystem", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Url", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<Guid?>("ParentUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ParentUrlId");

                    b.ToTable("Url", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.UrlSystemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("InterfaceType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.ToTable("UrlSystemType", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<Guid>("PageWidgetSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PageZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PageWidgetSettingId")
                        .IsUnique();

                    b.HasIndex("PageZoneId");

                    b.HasIndex("WidgetId")
                        .IsUnique();

                    b.ToTable("PageWidget", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidgetSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("ClassCustom")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Grid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("col-12")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsAsync")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(4);

                    b.Property<bool>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnOrder(100);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<Guid>("WidgetTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WidgetTemplateId")
                        .IsUnique();

                    b.ToTable("PageWidgetSetting", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PageId");

                    b.ToTable("PageZone", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.Widget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(2);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnOrder(5);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Widget", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<string>("WidgetServiceClassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("WidgetService", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(998);

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(3);

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(4);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(999);

                    b.Property<byte>("State")
                        .HasColumnType("tinyint")
                        .HasColumnOrder(9999);

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(2);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WidgetServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WidgetId");

                    b.HasIndex("WidgetServiceId")
                        .IsUnique();

                    b.ToTable("WidgetTemplate", (string)null);
                });

            modelBuilder.Entity("Indivis.Infrastructure.Persistence.Identities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Indivis.Infrastructure.Persistence.Identities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.EntityUrl", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Url", "Url")
                        .WithMany()
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.ManyToMany.Url_UrlSystemType", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Url", "Url")
                        .WithMany("Url_UrlSystemTypes")
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.UrlSystemType", "UrlSystemType")
                        .WithMany("Url_UrlSystemTypes")
                        .HasForeignKey("UrlSystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Url");

                    b.Navigation("UrlSystemType");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Page", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.PageSystem", "PageSystem")
                        .WithMany("Pages")
                        .HasForeignKey("PageSystemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Url", "Url")
                        .WithOne()
                        .HasForeignKey("Indivis.Core.Domain.Entities.CoreEntities.Page", "UrlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PageSystem");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Url", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Url", "ParentUrl")
                        .WithMany("SubUrls")
                        .HasForeignKey("ParentUrlId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentUrl");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidget", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidgetSetting", "PageWidgetSetting")
                        .WithOne()
                        .HasForeignKey("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidget", "PageWidgetSettingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageZone", "PageZone")
                        .WithMany("PageWidgets")
                        .HasForeignKey("PageZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.Widget", "Widget")
                        .WithOne()
                        .HasForeignKey("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidget", "WidgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PageWidgetSetting");

                    b.Navigation("PageZone");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidgetSetting", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetTemplate", "WidgetTemplate")
                        .WithOne()
                        .HasForeignKey("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageWidgetSetting", "WidgetTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WidgetTemplate");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageZone", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Page", "Page")
                        .WithMany("PageZones")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.Widget", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetTemplate", b =>
                {
                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.Widget", "Widget")
                        .WithMany("WidgetTemplates")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetService", "WidgetService")
                        .WithOne()
                        .HasForeignKey("Indivis.Core.Domain.Entities.CoreEntities.Widgets.WidgetTemplate", "WidgetServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Widget");

                    b.Navigation("WidgetService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Indivis.Infrastructure.Persistence.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Page", b =>
                {
                    b.Navigation("PageZones");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.PageSystem", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Url", b =>
                {
                    b.Navigation("SubUrls");

                    b.Navigation("Url_UrlSystemTypes");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.UrlSystemType", b =>
                {
                    b.Navigation("Url_UrlSystemTypes");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.PageZone", b =>
                {
                    b.Navigation("PageWidgets");
                });

            modelBuilder.Entity("Indivis.Core.Domain.Entities.CoreEntities.Widgets.Widget", b =>
                {
                    b.Navigation("WidgetTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
